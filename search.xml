<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Leetcode160.相交链表 双指针判断</title>
      <link href="/posts/a48822be.html"/>
      <url>/posts/a48822be.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>Problem: <a href="https://leetcode.cn/problems/intersection-of-two-linked-lists/description/">160. 相交链表</a></p></blockquote><h1 id="解题方法"><a href="#解题方法" class="headerlink" title="解题方法"></a>解题方法</h1><p>首先从两个链表头结点往后遍历，记录两个链表的长度，此时遍历指针应指向末尾结点<br>若两个链表相交，则<strong>末尾结点的内存地址一定相同</strong>，以此来判断是否相交<br>然后计算长度差step，长链表指针<strong>先走step步</strong>，然后长短链表指针同时向后走，此时若遇到的第一个相同结点就是相交的首结点</p><h1 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h1><ul><li><p>时间复杂度: $O(n)$</p></li><li><p>空间复杂度: $O(1)$</p></li></ul><h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><figure class="highlight c++"><figcaption><span>[]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode *<span class="title">getIntersectionNode</span><span class="params">(ListNode *headA, ListNode *headB)</span> </span>&#123;</span><br><span class="line">        ListNode *pa=headA;</span><br><span class="line">        ListNode *pb=headB;</span><br><span class="line">        <span class="type">int</span> lenA=<span class="number">0</span>,lenB=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(pa-&gt;next!=<span class="literal">nullptr</span>)  <span class="comment">//计算链表A的长度</span></span><br><span class="line">        &#123;</span><br><span class="line">            lenA++;</span><br><span class="line">            pa=pa-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(pb-&gt;next!=<span class="literal">nullptr</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            lenB++;</span><br><span class="line">            pb=pb-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(pa!=pb)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="type">int</span> step=<span class="built_in">abs</span>(lenA-lenB);  <span class="comment">//计算较长链表应先走的步数</span></span><br><span class="line">        ListNode *p=lenA&gt;=lenB?headA:headB;</span><br><span class="line">        ListNode *p1=lenA&lt;lenB?headA:headB;</span><br><span class="line">        <span class="keyword">while</span>(step&gt;<span class="number">0</span>)  <span class="comment">//长链表先走</span></span><br><span class="line">        &#123;</span><br><span class="line">            p=p-&gt;next;</span><br><span class="line">            step--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(p!=p1)</span><br><span class="line">        &#123;</span><br><span class="line">            p=p-&gt;next;</span><br><span class="line">            p1=p1-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> p;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 链表 </tag>
            
            <tag> C++ </tag>
            
            <tag> Leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode138.复制带随机指针的链表 原地深拷贝</title>
      <link href="/posts/d7998237.html"/>
      <url>/posts/d7998237.html</url>
      
        <content type="html"><![CDATA[<p>Problem: <a href="https://leetcode.cn/problems/copy-list-with-random-pointer/description/">138. 复制带随机指针的链表</a></p><p>[TOC]</p><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>进行深拷贝，首先想到使用哈希表，若要求原地拷贝，则使用结点拆分的方法</p><h1 id="解题方法"><a href="#解题方法" class="headerlink" title="解题方法"></a>解题方法</h1><ol><li>首先不考虑random指针，将原始链表的各个结点复制并串起来  <blockquote><p>复制前：$1-2-3-4$<br>复制后：$1-1’-2-2’-3-3’-4-4’$</p></blockquote></li></ol><ol><li>再次两个一组从头遍历数组p1指向前一个结点，p2指向后一个结点（也就是复制出来的结点），将复制后的结点random值指向正确位置<code>p2-&gt;random=p1-&gt;random-&gt;next</code><br><strong>已经能够保证原始结点的next指针指向复制后结点</strong>  </li><li>最后遍历链表，分离原始结点和复制结点<h1 id="踩坑记录"><a href="#踩坑记录" class="headerlink" title="踩坑记录"></a>踩坑记录</h1></li><li>记住要将原始链表还原，不然不通过  </li><li>小心对null指针使用next造成内存错误访问<h1 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h1></li></ol><ul><li><p>时间复杂度: $O(n)$</p></li><li><p>空间复杂度: $O(1)$</p></li></ul><h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><figure class="highlight c++"><figcaption><span>[]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">// Definition for a Node.</span></span><br><span class="line"><span class="comment">class Node &#123;</span></span><br><span class="line"><span class="comment">public:</span></span><br><span class="line"><span class="comment">    int val;</span></span><br><span class="line"><span class="comment">    Node* next;</span></span><br><span class="line"><span class="comment">    Node* random;</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">    Node(int _val) &#123;</span></span><br><span class="line"><span class="comment">        val = _val;</span></span><br><span class="line"><span class="comment">        next = NULL;</span></span><br><span class="line"><span class="comment">        random = NULL;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">Node* <span class="title">copyRandomList</span><span class="params">(Node* head)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(head==<span class="literal">nullptr</span>)</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    Node *p=head;</span><br><span class="line">    Node *p2;</span><br><span class="line">    <span class="comment">//Node *copy;</span></span><br><span class="line">    <span class="keyword">while</span> (p2!=<span class="literal">nullptr</span>) <span class="comment">//第一次遍历，形成复制结点</span></span><br><span class="line">    &#123;</span><br><span class="line">        p2=p-&gt;next;</span><br><span class="line">        <span class="comment">// Node copy(p-&gt;val);</span></span><br><span class="line">        Node* copy=<span class="keyword">new</span> <span class="built_in">Node</span>(p-&gt;val);</span><br><span class="line">        copy-&gt;next=p2;</span><br><span class="line">        p-&gt;next=copy;</span><br><span class="line">        p=p2;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    Node *p1=head;</span><br><span class="line">    p2=p1-&gt;next;</span><br><span class="line">    <span class="keyword">if</span>(p2-&gt;next==<span class="literal">nullptr</span>)  <span class="comment">//第二次遍历，处理random指针</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(p1-&gt;random==<span class="literal">nullptr</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            p2-&gt;random=<span class="literal">nullptr</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">        p2-&gt;random=p1-&gt;random-&gt;next;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (p2-&gt;next!=<span class="literal">nullptr</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(p1-&gt;random==<span class="literal">nullptr</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            p2-&gt;random=<span class="literal">nullptr</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">        p2-&gt;random=p1-&gt;random-&gt;next;&#125;</span><br><span class="line">        p2=p2-&gt;next-&gt;next;</span><br><span class="line">        p1=p1-&gt;next-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    p2-&gt;random=p1-&gt;random==<span class="literal">nullptr</span>?<span class="literal">nullptr</span>:p1-&gt;random-&gt;next; <span class="comment">//重要！！！对末尾结点进行处理，循环处理不到</span></span><br><span class="line">    p1=head-&gt;next;</span><br><span class="line"></span><br><span class="line">    Node *ori_p=head;</span><br><span class="line">    Node* new_head=head-&gt;next;</span><br><span class="line">    <span class="keyword">while</span> (p1-&gt;next!=<span class="literal">nullptr</span>)  <span class="comment">//第三次遍历，分离原始链表和复制链表</span></span><br><span class="line">    &#123;</span><br><span class="line">        p2=p1-&gt;next-&gt;next;</span><br><span class="line">        ori_p-&gt;next=p1-&gt;next; <span class="comment">//重要！！！记住分离原始链表</span></span><br><span class="line">        ori_p=ori_p-&gt;next;</span><br><span class="line">        p1-&gt;next=p2;</span><br><span class="line">        p1=p2;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    ori_p-&gt;next=<span class="literal">nullptr</span>;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> new_head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 链表 </tag>
            
            <tag> C++ </tag>
            
            <tag> Leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode剑指Offer51.数组中的逆序对 分治法求解</title>
      <link href="/posts/a393094e.html"/>
      <url>/posts/a393094e.html</url>
      
        <content type="html"><![CDATA[<h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>类似于<strong>归并排序</strong>，使用分治思想解决<br>要求逆序对的个数，对于数组中的每个元素，可以求在它之后且比它小的元素个数，通过分治方法可以简单实现</p><h1 id="解题方法"><a href="#解题方法" class="headerlink" title="解题方法"></a>解题方法</h1><p>divide：将数组分为前后两部分进行递归<br>conquer：要合并已排好序的两个子序列，设置两个指针指向数组首元素，在挑选较大元素的同时比较后一个数组指针所指的元素是否小于前一个数组指针所指的元素，若小于，则后一数组在该元素之后的元素均小于前一数组对应的元素，在计数器上加上满足要求的元素个数即可</p><h1 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h1><ul><li><p>时间复杂度: $O(nlogn)$</p></li><li><p>空间复杂度: $O(n)$</p></li></ul><h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><figure class="highlight c++"><figcaption><span>[]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">merge</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;vec,<span class="type">int</span> L,<span class="type">int</span> R,<span class="type">int</span> mid)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">int</span> p1=L;</span><br><span class="line">        <span class="type">int</span> p2=mid+<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> i=<span class="number">0</span>,cnt=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> help[R-L+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">while</span> (p1&lt;=mid&amp;&amp;p2&lt;=R)</span><br><span class="line">        &#123;</span><br><span class="line">            cnt+=vec[p1]&gt;vec[p2]?(R-p2+<span class="number">1</span>):<span class="number">0</span>;</span><br><span class="line">            help[i++]=vec[p1]&gt;vec[p2]?vec[p1++]:vec[p2++];  <span class="comment">//这里不能带等号，不然会漏</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(p1&lt;=mid)  <span class="comment">//将有剩余元素加入数组</span></span><br><span class="line">        &#123;</span><br><span class="line">            help[i++]=vec[p1++];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (p2&lt;=R)</span><br><span class="line">        &#123;</span><br><span class="line">            help[i++]=vec[p2++];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;R-L+<span class="number">1</span>;i++) <span class="comment">//将辅助空间的数据拷贝到原始数组</span></span><br><span class="line">        &#123;</span><br><span class="line">            vec[L+i]=help[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cnt;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">Reverse</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;vec,<span class="type">int</span> L,<span class="type">int</span> R)</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(L==R)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> mid=L+((R-L)&gt;&gt;<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Reverse</span>(vec,L,mid)+<span class="built_in">Reverse</span>(vec,mid+<span class="number">1</span>,R)+<span class="built_in">merge</span>(vec,L,R,mid);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">reversePairs</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums.<span class="built_in">size</span>()==<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Reverse</span>(nums,<span class="number">0</span>,nums.<span class="built_in">size</span>()<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> Leetcode </tag>
            
            <tag> 分治 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode234.回文链表 快慢指针求解</title>
      <link href="/posts/84e9e2dc.html"/>
      <url>/posts/84e9e2dc.html</url>
      
        <content type="html"><![CDATA[<h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>由于是单向链表而不是双向链表，所以不能直接从两边往中间判断，考虑使用<strong>快慢指针</strong>定位链表中点位置，然后将中点之后的链表反转，这样就能完成从两边往中间判断，且不需要额外空间</p><h1 id="解题方法"><a href="#解题方法" class="headerlink" title="解题方法"></a>解题方法</h1><p>设置快指针fast_p，慢指针slow_p，一开始均指向链表头结点<br>快指针每走两步，慢指针走一步  </p><ul><li>若链表长度为偶数，则快指针最后走到null结点，慢指针走到中间两个结点的后一个结点  </li><li>若链表长度为奇数，则快指针最后走到末尾结点，慢指针走到中间结点  </li></ul><p>然后将以慢指针所指结点为头结点的链表（也就是后半部分）反转即可<br>参考-&gt;<a href="https://leetcode.cn/problems/reverse-linked-list/">反转链表</a></p><h1 id="踩坑记录"><a href="#踩坑记录" class="headerlink" title="踩坑记录"></a>踩坑记录</h1><p>1.对于用逻辑或连接的判断语句<code>if(fast_p==nullptr||fast_p-&gt;next==nullptr)</code>不能交换两个判断次序，若交换了可能出现访问null的next结点，造成错误访问（逻辑或若判断第一个条件为1，则不会判断第二个条件直接返回1）<br>2.边界条件：对于结点数较短的链表（0,1,2,3,4），最好单独进行判断，防止错误访问</p><h1 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h1><ul><li><p>时间复杂度: $O(n)$</p></li><li><p>空间复杂度:  $O(1)$</p></li></ul><h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><figure class="highlight c++"><figcaption><span>[]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode() : val(0), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x, ListNode *next) : val(x), next(next) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isPalindrome</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head-&gt;next==<span class="literal">nullptr</span>) <span class="comment">//结点数为1</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span>(head-&gt;next-&gt;next==<span class="literal">nullptr</span>) <span class="comment">//结点数为2</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(head-&gt;next-&gt;val==head-&gt;val)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode *fast_p=head; <span class="comment">//快指针</span></span><br><span class="line">        ListNode *slow_p=head; <span class="comment">//慢指针</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(fast_p==<span class="literal">nullptr</span>||fast_p-&gt;next==<span class="literal">nullptr</span>) <span class="comment">//先判断前一个条件，若两个条件相反则出现内存错误访问</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            fast_p=fast_p-&gt;next-&gt;next; <span class="comment">//快指针走两步，慢指针走一步</span></span><br><span class="line">            slow_p=slow_p-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode *p1,*p2,*p3;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(slow_p-&gt;next-&gt;next==<span class="literal">nullptr</span>) <span class="comment">//只有四个结点时</span></span><br><span class="line">        &#123;</span><br><span class="line">            p1=slow_p;</span><br><span class="line">            p2=p1-&gt;next;</span><br><span class="line">            p2-&gt;next=p1;</span><br><span class="line">            p1-&gt;next=<span class="literal">nullptr</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            p1=slow_p;</span><br><span class="line">            p2=slow_p-&gt;next;</span><br><span class="line">            p3=slow_p-&gt;next-&gt;next;</span><br><span class="line">            p1-&gt;next=<span class="literal">nullptr</span>;</span><br><span class="line">            <span class="keyword">while</span> (<span class="number">1</span>)  <span class="comment">//反转链表</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(p3==<span class="literal">nullptr</span>)</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                p2-&gt;next=p1;</span><br><span class="line">                p1=p2;</span><br><span class="line">                p2=p3;</span><br><span class="line">                p3=p3-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            p2-&gt;next=p1;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        ListNode *p=head;</span><br><span class="line">        <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(p2==<span class="literal">nullptr</span>)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">if</span>(p2-&gt;val==p-&gt;val)  <span class="comment">//左右两边往中间判断</span></span><br><span class="line">            &#123;</span><br><span class="line">                p2=p2-&gt;next;</span><br><span class="line">                p=p-&gt;next;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 链表 </tag>
            
            <tag> C++ </tag>
            
            <tag> Leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode70.爬楼梯 动态规划求解</title>
      <link href="/posts/b74d39ce.html"/>
      <url>/posts/b74d39ce.html</url>
      
        <content type="html"><![CDATA[<h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><p>当n=1时，只有一种方法<br>当n=2时，有两种方法(走两次一级台阶或者一次走两级台阶)<br>当n=3时，<strong>可以由n=1和n=2推得n=3的情况</strong>，</p><blockquote><p>若最后一次在第三级台阶，则上一步可能在第一级台阶，后一次走了两步；也可能在第二级台阶，一次走了一步，所以到第三级台阶的方法为到第一第二级台阶方法之和<br>为什么不能在第一级台阶然后走两步到第三级台阶呢？<br>因为这样会经过第二级台阶，重复了  </p></blockquote><h4 id="递推公式"><a href="#递推公式" class="headerlink" title="递推公式"></a>递推公式</h4><p>$dp[i]=dp[i-1]+dp[i-2]$</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">climbStairs</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">unsigned</span> <span class="type">int</span>&gt; stair;</span><br><span class="line">        <span class="type">unsigned</span> <span class="type">int</span> num;</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">2</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">        stair.<span class="built_in">push_back</span>(<span class="number">1</span>);</span><br><span class="line">        stair.<span class="built_in">push_back</span>(<span class="number">2</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            num=stair[i<span class="number">-1</span>]+stair[i<span class="number">-2</span>];</span><br><span class="line">            stair.<span class="built_in">push_back</span>(num);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> stair[n<span class="number">-1</span>];</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> Leetcode </tag>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>模拟退火算法</title>
      <link href="/posts/a0d601b7.html"/>
      <url>/posts/a0d601b7.html</url>
      
        <content type="html"><![CDATA[<h3 id="1-简介"><a href="#1-简介" class="headerlink" title="1-简介"></a>1-简介</h3><p><strong>模拟退火算法（Simulated Annealing，SA）是一种模拟物理退火的过程而设计的随机优化算法</strong>，结合爬山法和随机行走算法，同时避免算法进入局部最优，早期用于组合优化，后来发展成一种通用的优化算法。</p><p>该算法采用类似于物理退火的过程，先在一个高温状态下（相当于算法随机搜索），然后逐渐退火，在每个温度下（相当于算法的每一次状态转移），徐徐冷却（相当于算法局部搜索），最终达到物理基态（相当于算法找到最优解）。</p><p><strong>高温过程</strong>——增强粒子的热运动，使其偏离平衡位置，目的是消除系统原先可能存在的非均匀态；<br><strong>等温过程</strong>——退火过程中要让温度<em>慢慢降低</em>，在每一个温度下要达到热平衡状态，对于与环境换热而温度不变的封闭系统满足自由能较少定律，系统状态的自发变化总是朝自由能减少的方向进行，当自由能达到最小时，系统达到平衡态；<br><strong>冷却过程</strong>——使粒子热运动减弱并渐趋有序，系统能量逐渐下降，从而得到低能的晶体结构。当液体凝固为固体的晶态时退火过程完成。</p><p>因此模拟退火算法从某一高温出发，在高温状态下计算初始解，然后以预设的邻域函数产生一个扰动量，从而得到新的状态，即模拟粒子的无序运动，比较新旧状态下的能量，即目标函数的解。如果新状态的能量小于旧状态，则状态发生转化；如果新状态的能量大于旧状态，则以Metropolis接受准则发生转化。当状态稳定后，便可以看作达到了当前状态的最优解，便可以开始降温，在下一个温度继续迭代，最终达到低温的稳定状态，便得到了模拟退火算法产生的结果</p><p>该算法的<strong>关键点</strong>如下： 1、对固体退火过程的模拟； 2、采用<em>Metropolis接受准则</em>  <sup><a href="#fn_1" id="reffn_1">1</a></sup>； 3、用冷却进度表控制算法进程，使算法在多项式时间里给出一个近似解。 固体退火过程是SAA的物理背景；Metropolis接受准则使算法跳离局部最优 “陷阱”；而冷却进度表的合理选择是算法应用的前提。</p><blockquote id="fn_1"><sup>1</sup>.  以概率接受新状态，固体在恒定温度下达到热平衡的过程可以用Monte Carlo方法（计算机随机模拟方法）加以模拟。<a href="#reffn_1" title="Jump back to footnote [1] in the text."> &#8617;</a></blockquote><h3 id="2-原理"><a href="#2-原理" class="headerlink" title="2-原理"></a>2-原理</h3><p>假设材料在状态 $i$ 下的能量为 $E(i)$ ，那么物体在温度 $T$  时从状态 $i$ 进入状态 $j$ 时遵循如下规律：</p><ul><li>若$E(j) &lt; E(i)$ 则接受该状态被转化</li><li>若$E(j) \geq E(i)$  则有$e^ {\frac{E(i)-E(j)}{KT}}$ 概率被转化 (K是玻尔兹曼常数，T是材料温度)<blockquote><p>由于这个过程得到的新状态 $E(j)$ 完全依赖于前一个状态 $E(i)$ 而与更前面的状态无关，所以是一个马尔可夫过程<sup><a href="#fn_2" id="reffn_2">2</a></sup></p></blockquote></li></ul><p><sup><a href="#fn_2" id="reffn_2">2</a></sup>:每个状态值取决于前面有限个状态。（条件概率）下一个时间点的值只与当前值有关系，与以前没有关系，即未来决定于现在而不是过去。$P(X<em>{n+1}=j|X_0=i_0,X_1 =i_1,X_2=i_2, …,X</em>{n-1}= i<em>{n-1}, X_n = i)= P(X</em>{n+1}=j|X_n=i)$ </p><h3 id="3-案例"><a href="#3-案例" class="headerlink" title="3-案例"></a>3-案例</h3><h4 id="观察函数图像"><a href="#观察函数图像" class="headerlink" title="观察函数图像"></a>观察函数图像</h4><p>考察的函数为$y=3x^2-60x+9$<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">x_function</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="number">3</span>*x**<span class="number">2</span>-<span class="number">60</span>*x+<span class="number">9</span></span><br><span class="line">x=[i <span class="keyword">for</span> i <span class="keyword">in</span> np.linspace(<span class="number">0</span>,<span class="number">100</span>)]</span><br><span class="line">y=<span class="built_in">map</span>(x_function,x)</span><br><span class="line">plt.plot(x,<span class="built_in">list</span>(y))</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></p><p>在$x=10$ 处函数取得最小值</p><h4 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h4><h5 id="1-解空间"><a href="#1-解空间" class="headerlink" title="(1) 解空间"></a>(1) 解空间</h5><p>解空间就是定义域的范围，在此为$[0,100]$</p><h5 id="2-目标函数"><a href="#2-目标函数" class="headerlink" title="(2) 目标函数"></a>(2) 目标函数</h5><p>我们所要求最值的函数</p><h5 id="3-新解的产生"><a href="#3-新解的产生" class="headerlink" title="(3) 新解的产生"></a>(3) 新解的产生</h5><p>在此案例中直接通过加上一个微小的偏差bias来微调<br><code>x_new = x + np.random.uniform(-1,1)</code><br>bias从均匀分布$[-1,1)$ 中任意采样</p><h5 id="4-代价函数差"><a href="#4-代价函数差" class="headerlink" title="(4) 代价函数差"></a>(4) 代价函数差</h5><p>为前后两次函数值的差值$E(j)-E(i)$</p><h5 id="5-接受准则"><a href="#5-接受准则" class="headerlink" title="(5) 接受准则"></a>(5) 接受准则</h5><p>为算法的核心部分</p><ul><li>if $E(j)&lt;E(i)$ 则概率$P=1$</li><li>else 概率$P=e^ {\frac{E(i)-E(j)}{KT}}$<br>使用中可以把K当作1处理，温度T可以是任意尺度的值(比如初始T=1)</li></ul><h5 id="6-降温"><a href="#6-降温" class="headerlink" title="(6) 降温"></a>(6) 降温</h5><p>选定一个降温系数 $a$ 进行降温处理，$T=a*T$ ,以此得到新的温度(由于要缓慢降温，所以 $a$ 应该要接近1，比如$a=0.999$)</p><h5 id="7-结束条件"><a href="#7-结束条件" class="headerlink" title="(7) 结束条件"></a>(7) 结束条件</h5><p>选定一个结束温度，当温度衰减到该值时结束算法，输出当前状态(比如$std=0.0000001$)</p><h3 id="4-程序实现"><a href="#4-程序实现" class="headerlink" title="4-程序实现"></a>4-程序实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">T=<span class="number">1</span> <span class="comment"># 初始温度</span></span><br><span class="line">x=np.random.uniform(<span class="number">0</span>,<span class="number">100</span>)</span><br><span class="line">std=<span class="number">0.0000001</span> <span class="comment"># 终止温度</span></span><br><span class="line">a=<span class="number">0.999</span> <span class="comment"># 衰减率</span></span><br><span class="line"><span class="keyword">while</span> T&gt;std:</span><br><span class="line">    y=x_function(x)</span><br><span class="line">    x_new=x+np.random.uniform(-<span class="number">1</span>,<span class="number">1</span>) <span class="comment"># 产生新值</span></span><br><span class="line">    <span class="keyword">if</span> x_new&gt;=<span class="number">0</span> <span class="keyword">and</span> x_new&lt;=<span class="number">100</span>:</span><br><span class="line">        y_new=x_function(x_new)</span><br><span class="line">        <span class="keyword">if</span> y_new&lt;y:</span><br><span class="line">            x=x_new</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            p=np.exp((y-y_new)/T)</span><br><span class="line">            r=np.random.uniform(<span class="number">0</span>,<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">if</span> p&gt;r:</span><br><span class="line">                x=x_new</span><br><span class="line">    T=T*a</span><br><span class="line"><span class="built_in">print</span>(x,x_function(x))</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数学建模 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学建模 </tag>
            
            <tag> 优化算法 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/posts/4a17b156.html"/>
      <url>/posts/4a17b156.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title></title>
      <link href="/css/mycss.css"/>
      <url>/css/mycss.css</url>
      
        <content type="html"><![CDATA[/* 首页文章卡片 */#recent-posts > .recent-post-item{    background:rgba(255, 255, 255, 0.9);}/* 首页侧栏卡片 */.card-widget{    background:rgba(255, 255, 255, 0.9)!important;}/* 文章页面正文背景 */div#post{    background: rgba(255, 255, 255, 0.9);}/* 分页页面 */div#page{    background: rgba(255, 255, 255, 0.9);}/* 归档页面 */div#archive{    background: rgba(255, 255, 255, 0.9);}/* 标签页面 */div#tag{    background: rgba(255, 255, 255, 0.9);}/* 分类页面 */div#category{    background: rgba(255, 255, 255, 0.9);}body {    cursor: url(https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@latest/Hexo/img/default.cur),        default;}a,img {    cursor: url(https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@latest/Hexo/img/pointer.cur),        default;}/* 彩带 */.card-info-avatar:hover {    background: url(https://cdn.jsdelivr.net/gh/rigodlee/BLOGCDN/img/H3342af90d24b4d62b9bbfec9688ccc25M.gif);}#web_bg {    /* 背景图地址 */    background: url(/img/backg.jpeg);    /* 平铺 */    background-repeat: no-repeat;    /* 背景图大小 */    background-size: cover;}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>tags</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>categories</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
